class StoriesController < InheritedResources::Base
  before_filter :permitted_params
  before_filter :authenticate_admin!, except: [:show, :read, :index]

  def index
    @stories = admin_signed_in? ? Story.all : Story.with_pages
  end

  def show
    super do |format|
      format.html do
        return redirect_to action: :read, story_link: @story.link
      end
    end
  end

  def read
    unless Story.any?
      return render text: "There aren't even any stories! What?!", status: 404
    end

    story_or_tag = params[:story_or_tag]
    page_number  = params[:page]
    if page_number.nil?
      return redirect_to read_story_page_path(story_or_tag, 1)
    end

    if story_or_tag.nil?
      @story = Story.active
      @page  = @story.page.where(number: page_number)

    elsif Story.where(link: story_or_tag).exists?
      @story = Story.find_by(link: story_or_tag)
      return redirect_to read_path(page_number) if @story.active?
      @page  = @story.pages.where(number: page_number)

    else
      @story = Story.active

      if @story.pages.tag?(story_or_tag)
        @page = @story.pages.tagged_number(story_or_tag, page_number)
      else
        return render_404(@story, story_or_tag)
      end
    end
  end

  # TODO this is really just the old #read action. Don't use it.
  def read_story(story_link)
    if story_link
      @story = case story_link
        when String then Story.where(link: story_link).first
        else story_link
      end

      # puts Story.all.map(&:link)
      # puts params[:story_link]

      @page = @story.pages.where(number: params[:page] || 1).first
    else
      if cookies[:page_id] && Page.where(id: cookies[:page_id]).exists?
        @page = Page.find cookies[:page_id]
        @story = @page.story
      else
        @story = Story.where(active: true).first || Story.order("created_at DESC").first
        @page = @story.first_page
      end
    end

    if @page.nil? || (!@page.published && !admin_signed_in?)
      render 'no_such_page', locals: { page_number: params[:page] }
    else
      @blog_post_ready = @page.blog_post &&
                         @page.blog_post.content &&
                        !@page.blog_post.content.empty?
      cookies[:page_id] = @page.id
      render 'show'
    end
  end

  private

  def render_404(story, tag = nil)
    return render '404', status: 404, locals: {story: story, tag: tag}
  end

  def permitted_params
    params.permit(:story_link, :page, story: [:name, :link, :active])
  end
end
